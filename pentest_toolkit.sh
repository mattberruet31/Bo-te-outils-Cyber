#!/bin/bash
# Script : pentest_toolkit_dynamic.sh
# Description : Menu interactif pour extraire et exécuter dynamiquement les commandes depuis le fichier Markdown cheat-couche_physique.md.
# Auteur : [Ton Nom]
# Date : $(date +"%Y-%m-%d")
# Remarque : Ce script est destiné à des environnements de test.

# Définir le fichier de log (avec date et heure pour l'unicité)
LOG_FILE="pentest_report_$(date +'%Y%m%d_%H%M%S').log"

# Chemin du fichier Markdown pour la couche physique
MD_FILE="docs/Couche1_Physique/cheat-couche_physique.md"

# Fonction de log
log_action() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Fonction de confirmation
confirm_execution() {
    echo -n "Voulez-vous exécuter cette commande ? [o/n] : "
    read confirmation
    if [[ "$confirmation" =~ ^[oO]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Fonction pour extraire les commandes depuis le Markdown
# Cette fonction démarre l'extraction à partir du header "## Commandes Clés" et récupère les blocs de code bash
extract_commands_from_markdown() {
    local md_file="$1"
    awk '
    BEGIN { in_section=0; in_code=0 }
    /^## Commandes Clés/ { in_section=1; next }
    in_section {
        if ($0 ~ /^## / && in_code==0) { exit }  # Fin de la section si un nouveau header apparaît
        if ($0 ~ /^```bash/) { in_code=1; next }
        if ($0 ~ /^```/ && in_code==1) { in_code=0; print "###END_OF_COMMAND###"; next }
        if (in_code) { print }
    }
    ' "$md_file"
}

# Fonction pour afficher et choisir une commande extraite du Markdown
execute_couche_physique_dynamic() {
    if [ ! -f "$MD_FILE" ]; then
        echo "Le fichier $MD_FILE n'existe pas !"
        exit 1
    fi

    # Extraire toutes les commandes et les séparer en utilisant le marqueur
    local raw_commands
    raw_commands=$(extract_commands_from_markdown "$MD_FILE")
    
    # On va stocker chaque commande (bloc multi-lignes) dans un tableau
    local commands=()
    local current_command=""
    while IFS= read -r line; do
        if [[ "$line" == "###END_OF_COMMAND###" ]]; then
            # Ajouter le bloc actuel au tableau, si non vide
            if [ -n "$current_command" ]; then
                commands+=("$current_command")
                current_command=""
            fi
        else
            current_command+="${line}"$'\n'
        fi
    done <<< "$raw_commands"

    # Vérifier qu'on a bien récupéré au moins une commande
    if [ ${#commands[@]} -eq 0 ]; then
        echo "Aucune commande trouvée dans $MD_FILE."
        return
    fi

    # Afficher un menu des commandes extraites
    echo "Commandes disponibles (extraites de $MD_FILE) :"
    for i in "${!commands[@]}"; do
        # Affichage de la première ligne (ou une partie) du bloc pour identifier la commande
        summary=$(echo "${commands[$i]}" | head -n 1)
        printf "%d) %s\n" $((i+1)) "$summary"
    done

    echo -n "Sélectionnez le numéro de la commande à exécuter (ou 0 pour annuler) : "
    read choice

    if [ "$choice" -le 0 ] || [ "$choice" -gt "${#commands[@]}" ]; then
        echo "Annulation ou choix invalide."
        log_action "Aucune commande exécutée dans la couche physique."
        return
    fi

    # Récupérer la commande sélectionnée
    local selected_command="${commands[$((choice-1))]}"
    echo "Commande sélectionnée :"
    echo "--------------------------------"
    echo "$selected_command"
    echo "--------------------------------"

    log_action "Sélectionné la commande de la couche physique : $(echo "$selected_command" | head -n 1)"

    if confirm_execution; then
        log_action "Exécution de la commande : $(echo "$selected_command" | head -n 1)"
        # Exécution de la commande ; notez que eval permet d'exécuter le contenu multi-lignes
        eval "$selected_command"
    else
        log_action "Commande affichée mais non exécutée."
    fi

    echo -n "Appuyez sur Entrée pour continuer..."
    read
}

# Menu principal simplifié pour tester la couche physique
while true; do
    clear
    echo "=========================================="
    echo "         Pentest Toolkit - Couche Physique"
    echo "=========================================="
    echo "1. Afficher et exécuter une commande depuis $MD_FILE"
    echo "2. Générer le rapport final"
    echo "3. Quitter"
    echo "=========================================="
    echo -n "Votre choix : "
    read main_choice
    case $main_choice in
        1) execute_couche_physique_dynamic ;;
        2)
            echo "Génération du rapport final..."
            {
                echo "# Rapport d'activité du Pentest Toolkit"
                echo "Date : $(date)"
                echo "-----------------------------------------"
                cat "$LOG_FILE"
            } > rapport_final.md
            echo "Rapport généré dans rapport_final.md"
            log_action "Rapport final généré."
            echo -n "Appuyez sur Entrée pour continuer..."
            read
            ;;
        3) echo "Au revoir !"; exit 0 ;;
        *) echo "Option invalide."; sleep 1 ;;
    esac
done
